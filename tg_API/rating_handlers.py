from loader import bot
from telebot import types
from tg_API.states import MyStates
from tg_API.button import menu_check, menu_set_filter_rating, menu_header_text_rating
from site_API.data_api import api_request
from logs.log import logger
from database.db import History
from datetime import datetime


rating_menu = {'kp': '–ö–∏–Ω–æ–ü–æ–∏—Å–∫', 'imdb': 'IMDb'}

type_menu = {'1': '—Ñ–∏–ª—å–º', '2': '—Å–µ—Ä–∏–∞–ª', '3': '–º—É–ª—å—Ç—Ñ–∏–ª—å–º', '4': '–∞–Ω–∏–º–µ',
             '5': '–º—É–ª—å—Ç—Å–µ—Ä–∏–∞–ª', '6': 'TV-—à–æ—É', '!null': '–Ω–µ –≤–∞–∂–Ω–æ'}

countries_menu = {'–†–æ—Å—Å–∏—è': '–†–æ—Å—Å–∏—è', '–°–°–°–†': '–°–°–°–†', '–ò–Ω–¥–∏—è': '–ò–Ω–¥–∏—è',
                  '–°–®–ê': '–°–®–ê', '–ö–∏—Ç–∞–π': '–ö–∏—Ç–∞–π', '–ì–æ–Ω–∫–æ–Ω–≥': '–ì–æ–Ω–∫–æ–Ω–≥',
                  '–§—Ä–∞–Ω—Ü–∏—è': '–§—Ä–∞–Ω—Ü–∏—è', '–ò—Ç–∞–ª–∏—è': '–ò—Ç–∞–ª–∏—è', '!null': '–ª—é–±–∞—è'}
year_menu = {'2023': '2023–≥.', '2022': '2022–≥.', '2021': '2021–≥.', '2020': '2020–≥.', '2010-2019': '2010-2019',
             '2000-2009': '2000-2009', '1992-1999': '1992-1999', '1890 - 1991': '–¥–æ 1991', '!null': '–Ω–µ –≤–∞–∂–Ω–æ'}

start_parameters = {'rating_type': 'kp', 'rating': '!null', 'typeNumber': '!null',
                    'countries': '!null', 'year': '!null',
                    'm_rating_type': '–ö–∏–Ω–æ–ü–æ–∏—Å–∫', 'm_rating': '–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: 0-10', 'm_type': '–ª—é–±–æ–π',
                    'm_countries': '–ª—é–±–∞—è', 'm_year': '–ª—é–±–æ–π'}


def get_parameters_name(my_user_id: int) -> str:
    """
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Å–ª–æ–≤–∞—Ä—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –µ–≥–æ —Å—Ç–∞—Ç—É—Å–æ–º (–ø—É–Ω–∫—Ç–æ–º –º–µ–Ω—é)
    """
    parameters = 'parameters_' + bot.get_state(my_user_id)[9:12]
    return parameters


def create_filter_rating(my_user_id: int, sort_type: str, sort: str):
    """
    —Å–æ–∑–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ start_parameters
    –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º (–ø—É–Ω–∫—Ç–æ–º –º–µ–Ω—é)
    """
    parameters = get_parameters_name(my_user_id)
    with bot.retrieve_data(my_user_id) as data:
        if data.get(parameters):
            return
        data[parameters] = {}
        data[parameters]['sortType'] = sort_type
        data[parameters].update(start_parameters)
        data[parameters]['m_sort'] = sort

        return


def get_parameters(my_user_id: int) -> dict:
    """
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º (–ø—É–Ω–∫—Ç–æ–º –º–µ–Ω—é)
    """
    name_dict = get_parameters_name(my_user_id)
    with bot.retrieve_data(my_user_id) as data:
        return data[name_dict]


def set_parameters(my_user_id: int, my_key: str, my_value: str) -> None:
    """
    —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ my_value –∫–ª—é—á—É my_key –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è my_user_id
    –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º (–ø—É–Ω–∫—Ç–æ–º –º–µ–Ω—é)
    :param my_user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param my_key: –∫–ª—é—á
    :param my_value: –∑–Ω–∞—á–µ–Ω–∏–µ
    :return: None
    """
    name_dict = get_parameters_name(my_user_id)
    logger.info(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {my_user_id} –≤ —Å–ª–æ–≤–∞—Ä–µ {name_dict} —É—Å—Ç–∞–Ω–æ–≤–∏–ª {my_key}={my_value}')
    with bot.retrieve_data(my_user_id) as data:
        data[name_dict][my_key] = my_value
    return


def save_history(user_id: int) -> None:
    """
    –∑–∞–ø–∏—Å—å —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    my_parameters = get_parameters(user_id)
    state = bot.get_state(user_id)[9:]
    History.create(user_id=user_id, state=state, **my_parameters)


def text_query_rating(user_id: int) -> dict:
    """
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Å–∞–π—Ç –ö–∏–Ω–æ–ü–æ–∏—Å–∫–∞
    """
    my_parameters = get_parameters(user_id)
    save_history(user_id)
    field_rating = my_parameters['rating_type']
    query = {'selectFields': 'id | rating.{} | name | typeNumber | year | countries.name | movieLength'
                             ''.format(field_rating),
             'sortField': 'rating.{}'.format(field_rating),
             'sortType': '{}'.format(my_parameters['sortType']),
             'page': '1',
             'limit': '5',
             'name': '!null',
             'rating.{}'.format(field_rating): '{}'.format(my_parameters['rating']),
             'typeNumber': '{}'.format(my_parameters['typeNumber']),
             'countries.name': '{}'.format(my_parameters['countries']),
             'year': '{}'.format(my_parameters['year'])}
    logger.info(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å {query}')
    return query


def print_movies(call: types.CallbackQuery, my_movies: list) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–∞—Ö
    """
    for elem in my_movies:
        logger.info(f'–ø–æ–ª—É—á–µ–Ω–æ: {elem}')
        countries_list = ''
        for countries_name in elem['countries']:
            if countries_list:
                countries_list += ', '
            countries_list += countries_name['name']
        message = 'üìà {}  <b>"{}"</b>\n{},  {}\n{}   {}–≥.'. \
            format(elem['rating'][get_parameters(call.from_user.id)['rating_type']],
                   elem['name'],
                   type_menu[str(elem['typeNumber'])],
                   str(elem['movieLength']) + ' –º–∏–Ω' if elem['movieLength'] is not None else '',
                   countries_list,
                   elem['year'])
        bot.send_message(call.from_user.id, text=message, parse_mode='HTML')


def message_check(call: types.CallbackQuery, my_text: str, my_markup: types.InlineKeyboardMarkup) -> None:
    """
    –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –¥–ª—è  –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    """
    bot.answer_callback_query(call.id)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text="<b>" + my_text + "</b>",
                          reply_markup=my_markup,
                          parse_mode='HTML')
    return


def menu_button_rating(call: types.CallbackQuery) -> None:
    """
    –≤—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    """
    user_id = call.from_user.id
    bot.answer_callback_query(call.id)
    bot.edit_message_text(chat_id=call.message.chat.id,
                          message_id=call.message.message_id,
                          text=menu_header_text_rating(get_parameters(user_id), bot.get_state(user_id)[9:12]),
                          reply_markup=menu_set_filter_rating(bot.get_state(user_id)[9:12]),
                          parse_mode='HTML')
    return


def menu_low(user_id: int, chat_id: int) -> None:
    """
    —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é MyStates.low
    –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–º–∞–Ω–¥–µ /low
    """
    bot.set_state(user_id, MyStates.low, chat_id)
    create_filter_rating(user_id, '1', '–Ω–∏–∑–∫–∏–º')
    logger.info(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –º–µ–Ω—é LOW. state=low')
    bot.send_message(chat_id,
                     text=menu_header_text_rating(get_parameters(user_id)),
                     reply_markup=menu_set_filter_rating(),
                     parse_mode='HTML')


def menu_high(user_id: int, chat_id: int) -> None:
    """
    —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é MyStates.high
    –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–º–∞–Ω–¥–µ /high
    """
    bot.set_state(user_id, MyStates.high, chat_id)
    create_filter_rating(user_id, '-1', '–≤—ã—Å–æ–∫–∏–º')
    logger.info(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –º–µ–Ω—é HIGH. state=high')
    bot.send_message(chat_id,
                     text=menu_header_text_rating(get_parameters(user_id)),
                     reply_markup=menu_set_filter_rating(),
                     parse_mode='HTML')


@bot.message_handler(commands=['low'])
def cmd_low_message(message) -> None:
    """
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /low -  –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    """
    menu_low(message.from_user.id, message.chat.id)


@bot.callback_query_handler(func=lambda c: c.data == 'bt_low')
def bt_low_message(call: types.CallbackQuery) -> None:
    """
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '—Ñ–∏–ª—å–º—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º' (–∞–Ω–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥—ã /low)
    –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    """
    bot.answer_callback_query(call.id)
    menu_low(call.from_user.id, call.message.chat.id)


@bot.message_handler(commands=['high'])
def cmd_high_message(message) -> None:
    """
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /high  -  –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    """
    menu_high(message.from_user.id, message.chat.id)


@bot.callback_query_handler(func=lambda c: c.data == 'bt_high')
def bt_high_message(call: types.CallbackQuery) -> None:
    """
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '—Ñ–∏–ª—å–º—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º' (–∞–Ω–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥—ã /high)
    –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    """
    bot.answer_callback_query(call.id)
    menu_high(call.from_user.id, call.message.chat.id)


def menu_custom(user_id: int, chat_id: int) -> None:
    """
    —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é MyStates.custom
    –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∫–æ–º–∞–Ω–¥–µ /custom
    """
    bot.set_state(user_id, MyStates.custom, chat_id)
    create_filter_rating(user_id, '-1', '–∑–∞–¥–∞–Ω–Ω—ã–º')
    logger.info(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –º–µ–Ω—é CUSTOM. state=custom')
    bot.send_message(chat_id,
                     text=menu_header_text_rating(get_parameters(user_id), state_user='cus'),
                     reply_markup=menu_set_filter_rating(state_user='cus'),
                     parse_mode='HTML')


@bot.message_handler(commands=['custom'])
def cmd_low_message(message) -> None:
    """
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /custom
    """
    menu_custom(message.from_user.id, message.chat.id)


@bot.callback_query_handler(func=lambda c: c.data == 'bt_custom')
def bt_low_message(call: types.CallbackQuery) -> None:
    """
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–∏–Ω—Ñ–æ –æ —Ñ–∏–ª—å–º–∞—Ö –ø–æ –í–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º' (–∞–Ω–∞–ª–æ–≥ –∫–æ–º–∞–Ω–¥—ã /custom)
    –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    """
    bot.answer_callback_query(call.id)
    menu_custom(call.from_user.id, call.message.chat.id)


@bot.callback_query_handler(func=lambda c: c.data == 'bt_ok_rating')
def process_callback_button_ok(call: types.CallbackQuery) -> None:
    """
    –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–û–ö –≤—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω' –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    """
    menu_button_rating(call)


@bot.callback_query_handler(func=lambda c: c.data.startswith('rating_type'))
def process_callback_type(call: types.CallbackQuery) -> None:
    """
    —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∏–ø–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ñ–∏–ª—å–º–æ–≤
    """
    user_id = call.from_user.id
    number_bt = call.data[11:]
    if number_bt:
        set_parameters(user_id, 'rating_type', number_bt)
        set_parameters(user_id, 'm_rating_type', rating_menu[number_bt])
    markup_type = menu_check(rating_menu, get_parameters(user_id)['rating_type'], 'rating_type')
    message_check(call, "–í—ã–±–µ—Ä–µ—Ç–µ –≤–µ—Ä—Å–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞:", markup_type)


@bot.callback_query_handler(func=lambda c: c.data == 'rating')
def process_callback_rating(call: types.CallbackQuery) -> None:
    """
    –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∏–ª—å–º–æ–≤
    """
    user_id = call.from_user.id
    bot.set_state(user_id, MyStates.custom_rating_low, call.message.chat.id)
    logger.info(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–¥–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞. state=custom_rating_low')
    bot.send_message(call.from_user.id, 'üìà –ó–∞–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–æ—Ç 0 –¥–æ 10):')


@bot.callback_query_handler(func=lambda c: c.data.startswith('type'))
def process_callback_type(call: types.CallbackQuery) -> None:
    """
    –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ç–∏–ø —Ñ–∏–ª—å–º–æ–≤
    """
    user_id = call.from_user.id
    number = call.data[4:]
    if number:
        set_parameters(user_id, 'typeNumber', number)
        set_parameters(user_id, 'm_type', type_menu[number])
    markup_type = menu_check(type_menu, get_parameters(user_id)['typeNumber'], 'type')
    message_check(call, "–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø —Ñ–∏–ª—å–º–∞:", markup_type)


@bot.callback_query_handler(func=lambda c: c.data.startswith('countries'))
def process_callback_countries(call: types.CallbackQuery) -> None:
    """
    –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å—Ç—Ä–∞–Ω–∞ —Ñ–∏–ª—å–º–∞
    """
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    if bot.get_state(user_id) == MyStates.custom.name:
        bot.set_state(user_id, MyStates.custom_countries, call.message.chat.id)
        logger.info(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞–Ω—É. state=custom_countries')
        bot.send_message(user_id, 'üåê –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã')
        bot.send_message(user_id, '–ß—Ç–æ –±—ã —Å–Ω—è—Ç—å —Ñ–∏–ª—å—Ç—Ä –≤–≤–µ–¥–∏—Ç–µ –ª—é–±—ã–µ —Å–∏–º–≤–æ–ª—ã')
    else:
        number = call.data[9:]
        if number:
            set_parameters(user_id, 'countries', number)
            set_parameters(user_id, 'm_countries', countries_menu[number])
        markup = menu_check(countries_menu, get_parameters(user_id)['countries'], 'countries')
        message_check(call, "–í—ã–±–µ—Ä–µ—Ç–µ —Å—Ç—Ä–∞–Ω—É:", markup)


@bot.callback_query_handler(func=lambda c: c.data.startswith('year'))
def process_callback_year(call: types.CallbackQuery) -> None:
    """
    –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –≥–æ–¥ (–≥–æ–¥—ã) –≤—ã—Ö–æ–¥–∞ —Ñ–∏–ª—å–º–æ–≤
    """
    user_id = call.from_user.id
    if bot.get_state(user_id) == MyStates.custom.name:
        bot.set_state(user_id, MyStates.custom_year_low, call.message.chat.id)
        logger.info(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–¥–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω years. state=custom_year_low')
        text = 'üìÜ –ó–∞–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –≥–æ–¥ (–æ—Ç 1890 –¥–æ {}):'.format(datetime.now().year)
        bot.send_message(user_id, text)
    else:
        number = call.data[4:]
        if number:
            set_parameters(user_id, 'year', number)
            set_parameters(user_id, 'm_year', year_menu[number])
        markup = menu_check(year_menu, get_parameters(user_id)['year'], 'year')
        message_check(call, "–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ–¥:", markup)


@bot.callback_query_handler(func=lambda c: c.data == 'bt_get')
def process_callback_get(call: types.CallbackQuery) -> None:
    """
    –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤'
    –≤—ã–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å API —Å–∞–π—Ç–∞
    –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç
    """
    user_id = call.from_user.id
    result, movies_response = api_request(text_query_rating(user_id), url_address='v1.3/movie?')
    bot.answer_callback_query(call.id)
    if result:
        movies = movies_response['docs']
        if len(movies) == 0:
            logger.warning(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}  –Ω–∞ –∑–∞–ø—Ä–æ—Å –≤–µ—Ä–Ω—É–ª—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫-')
            bot.send_message(user_id, '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!.\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–∏—Å–∫–∞')
        else:
            print_movies(call, movies)
    else:
        logger.error(f'–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞')
        bot.send_message(user_id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ')
    # rating = True if bot.get_state(user_id) == MyStates.custom.name else False
    bot.send_message(call.message.chat.id,
                     text=menu_header_text_rating(get_parameters(user_id), bot.get_state(user_id)[9:12]),
                     reply_markup=menu_set_filter_rating(bot.get_state(user_id)[9:12]),
                     parse_mode='HTML')
