from telebot import types


def menu_begin() -> types.InlineKeyboardMarkup:
    """
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("Ô∏èüé¨  —Ñ–∏–ª—å–º—ã —Å –Ω–∏–∑–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º ", callback_data='bt_low'))
    markup.add(types.InlineKeyboardButton("Ô∏èÔ∏èüé¨  —Ñ–∏–ª—å–º—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º", callback_data='bt_high'))
    markup.add(types.InlineKeyboardButton("Ô∏èüé¨  –∏–Ω—Ñ–æ –æ —Ñ–∏–ª—å–º–∞—Ö –ø–æ –í–∞—à–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data='bt_custom'))
    markup.add(types.InlineKeyboardButton("üìú  –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data='bt_history'))

    return markup


def menu_check(my_variants: dict, param: str, field: str) -> types.InlineKeyboardMarkup:
    """
    —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –º–µ–Ω—é –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    :param my_variants: dict —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∑–Ω–∞—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–∞
    :param param: str  —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
    :param field: str –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Å –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    :return:
    """
    buttons = []
    markup = types.InlineKeyboardMarkup(row_width=2)
    for key, value in my_variants.items():
        emoji = '‚úîÔ∏è ' if key == param else 'üîµ '
        button = types.InlineKeyboardButton(emoji + value, callback_data=field + key)
        buttons.append(button)
    markup.add(*buttons)
    markup.add(types.InlineKeyboardButton('<<  üÜó, –≤—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω', callback_data='bt_ok_rating'))

    return markup


def menu_header_text_rating(menu_parameters: dict, state_user: str = '') -> str:
    """
    :param menu_parameters: dict –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param state_user: str –µ—Å–ª–∏ —Ä–µ–∂–∏–º - /custom, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥
    :return: str  –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ñ–∏–ª—å—Ç—Ä–∞
    """
    rating_text = ''
    if state_user == 'cus':
        rating_text = f" üîπÔ∏è —Ä–µ–π—Ç–∏–Ω–≥ <b>{menu_parameters['m_rating']}</b>\n"
    text = ("<b> –§–∏–ª—å–º—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏ —Å {m_sort} —Ä–µ–π—Ç–∏–Ω–≥–æ–º </b>\n"            
            " üîπÔ∏è –ø–æ –≤–µ—Ä—Å–∏–∏  <b>{m_rating_type}</b>\n {rating_text}"
            " üîπÔ∏è —Ç–∏–ø —Ñ–∏–ª—å–º–∞:  <b>{m_type}</b>\n"
            " üîπÔ∏è —Å—Ç—Ä–∞–Ω–∞:  <b>{m_countries}</b>\n"
            " üîπÔ∏è –≥–æ–¥:  <b>{m_year}</b>".format(rating_text=rating_text, **menu_parameters))
    return text


def menu_set_filter_rating(state_user: str = '') -> types.InlineKeyboardMarkup:
    """
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ–Ω—é –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–º–µ–Ω–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    :param state_user: str –µ—Å–ª–∏ —Ä–µ–∂–∏–º - /custom, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥
    """
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —Ä–µ–π—Ç–∏–Ω–≥–∞", callback_data='rating_type'))
    if state_user == 'cus':
        markup.add(types.InlineKeyboardButton("‚öôÔ∏è –ó–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞", callback_data='rating'))
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è –í—ã–±—Ä–∞—Ç—å —Ç–∏–ø —Ñ–∏–ª—å–º–∞", callback_data='type'))
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è  –í—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data='countries'))
    markup.add(types.InlineKeyboardButton("‚öôÔ∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ–¥", callback_data='year'))
    markup.add(types.InlineKeyboardButton("üìΩÔ∏è  –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤", callback_data='bt_get'))
    markup.add(types.InlineKeyboardButton("‚ÜñÔ∏è  –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='start'))

    return markup
